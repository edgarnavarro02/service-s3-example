ENDPOINT=https://example.com
ACCESSKEYID=xxxxxxxxxxxxxxxx
SECRETACCESSKEY=yyyyyyyyyyyyyyyyyyyyyyy
BUCKET=bucket































# MAin

# package com.example.phone

# import PhoneCallListener
# import android.Manifest
# import android.content.Context
# import android.content.Intent
# import android.content.pm.PackageManager
# import android.net.Uri
# import android.os.Bundle
# import android.telephony.PhoneStateListener
# import android.telephony.TelephonyManager
# import androidx.appcompat.app.AppCompatActivity
# import androidx.core.app.ActivityCompat
# import androidx.core.content.ContextCompat
# import android.util.Log

# class MainActivity : AppCompatActivity() {

#     private lateinit var phoneCallListener: PhoneCallListener
#     private lateinit var socketManager: SocketManager
#     private val REQUEST_CALL_PERMISSIONS = 100

#     override fun onCreate(savedInstanceState: Bundle?) {
#         super.onCreate(savedInstanceState)
#         setContentView(R.layout.activity_main)

#         // Inicializamos el listener para eventos de llamada
#         phoneCallListener = PhoneCallListener()

#         // Verificamos y solicitamos permisos
#         checkAndRequestPermissions()

#         // Iniciar el SocketManager y escuchar órdenes del backend
#         socketManager = SocketManager(this) { number ->
#             placeCall(number)
#         }
#         socketManager.connect()
#     }

#     private fun checkAndRequestPermissions() {
#         if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED ||
#             ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {

#             ActivityCompat.requestPermissions(this, arrayOf(
#                 Manifest.permission.READ_PHONE_STATE,
#                 Manifest.permission.CALL_PHONE
#             ), REQUEST_CALL_PERMISSIONS)
#         } else {
#             startPhoneCallListener()
#         }
#     }

#     // Iniciar el listener de estado de llamadas
#     private fun startPhoneCallListener() {
#         // Inicia el listener de llamadas para escuchar el estado de la llamada
#         val telephonyManager = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
#         telephonyManager.listen(phoneCallListener, PhoneStateListener.LISTEN_CALL_STATE)
#         Log.d("MainActivity", "Phone call listener started")
#     }

#     // Método para realizar una llamada PSTN
#     private fun placeCall(number: String) {
#         if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {
#             val callIntent = Intent(Intent.ACTION_CALL, Uri.parse("tel:$number"))
#             startActivity(callIntent)
#             Log.d("MainActivity", "Iniciando llamada a $number")
#         } else {
#             Log.e("MainActivity", "Permiso CALL_PHONE no concedido.")
#         }
#     }

#     // Manejar la respuesta de permisos
#     override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
#         super.onRequestPermissionsResult(requestCode, permissions, grantResults)
#         if (requestCode == REQUEST_CALL_PERMISSIONS) {
#             if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
#                 startPhoneCallListener()
#             } else {
#                 Log.e("MainActivity", "Permisos de llamada denegados")
#             }
#         }
#     }
# }



# PhoneCallListener

# import android.content.Context
# import android.telephony.PhoneStateListener
# import android.telephony.TelephonyManager
# import android.util.Log
# import org.json.JSONObject
# import java.text.SimpleDateFormat
# import java.util.*

# class PhoneCallListener : PhoneStateListener() {

#     private var lastState = TelephonyManager.CALL_STATE_IDLE
#     private var callStartTime: Date? = null
#     private var isIncoming = false
#     private var savedNumber: String? = null // Para almacenar el número de la llamada

#     override fun onCallStateChanged(state: Int, number: String?) {
#         super.onCallStateChanged(state, number)

#         when (state) {
#             TelephonyManager.CALL_STATE_RINGING -> {
#                 // La llamada está sonando, es una llamada entrante
#                 isIncoming = true
#                 callStartTime = Date()
#                 savedNumber = number ?: "UNKNOWN"
#             }
#             TelephonyManager.CALL_STATE_OFFHOOK -> {
#                 if (lastState == TelephonyManager.CALL_STATE_RINGING) {
#                     // La llamada entrante ha sido contestada
#                     isIncoming = true
#                     callStartTime = Date()
#                     onIncomingCallEstablished(savedNumber!!, callStartTime!!)
#                 } else if (lastState == TelephonyManager.CALL_STATE_IDLE) {
#                     // La llamada saliente ha sido iniciada
#                     isIncoming = false
#                     callStartTime = Date()
#                     onOutgoingCallEstablished(savedNumber!!, callStartTime!!)
#                 }
#             }
#             TelephonyManager.CALL_STATE_IDLE -> {
#                 if (lastState == TelephonyManager.CALL_STATE_RINGING) {
#                     // La llamada entrante se perdió
#                     onMissedCall(savedNumber!!, callStartTime!!)
#                 } else if (isIncoming) {
#                     // La llamada entrante ha terminado
#                     onIncomingCallEnded(savedNumber!!, callStartTime!!, Date())
#                 } else {
#                     // La llamada saliente ha terminado
#                     onOutgoingCallEnded(savedNumber!!, callStartTime!!, Date())
#                 }
#             }
#         }
#         lastState = state
#     }

#     private fun onIncomingCallEstablished(number: String, start: Date) {
#         val jsonObject = JSONObject().apply {
#             put("Timestamp", getUTCTimestamp())
#             put("Direction", "incoming call established")
#             put("Number", number)
#         }
#         // Notificar al backend o realizar otra acción
#         Log.d("PhoneCallListener", "Incoming call established: $jsonObject")
#     }

#     private fun onOutgoingCallEstablished(number: String, start: Date) {
#         val jsonObject = JSONObject().apply {
#             put("Timestamp", getUTCTimestamp())
#             put("Direction", "outgoing call established")
#             put("Number", number)
#         }
#         // Notificar al backend o realizar otra acción
#         Log.d("PhoneCallListener", "Outgoing call established: $jsonObject")
#     }

#     private fun onIncomingCallEnded(number: String, start: Date, end: Date) {
#         val jsonObject = JSONObject().apply {
#             put("Timestamp", getUTCTimestamp())
#             put("Direction", "incoming call ended")
#             put("Number", number)
#         }
#         // Notificar al backend o realizar otra acción
#         Log.d("PhoneCallListener", "Incoming call ended: $jsonObject")
#     }

#     private fun onOutgoingCallEnded(number: String, start: Date, end: Date) {
#         val jsonObject = JSONObject().apply {
#             put("Timestamp", getUTCTimestamp())
#             put("Direction", "outgoing call ended")
#             put("Number", number)
#         }
#         // Notificar al backend o realizar otra acción
#         Log.d("PhoneCallListener", "Outgoing call ended: $jsonObject")
#     }

#     private fun onMissedCall(number: String, start: Date) {
#         val jsonObject = JSONObject().apply {
#             put("Timestamp", getUTCTimestamp())
#             put("Direction", "missed")
#             put("Number", number)
#         }
#         // Notificar al backend o realizar otra acción
#         Log.d("PhoneCallListener", "Missed call: $jsonObject")
#     }

#     private fun getUTCTimestamp(): String {
#         // Implementar método para obtener la marca de tiempo UTC actual
#         return System.currentTimeMillis().toString()
#     }
# }


# ultimo MainActivity

# package com.example.phone

# import android.Manifest
# import android.content.*
# import android.content.pm.PackageManager
# import android.net.Uri
# import android.os.Bundle
# import android.telephony.TelephonyManager
# import android.util.Log
# import androidx.appcompat.app.AppCompatActivity
# import androidx.core.app.ActivityCompat
# import androidx.core.content.ContextCompat

# class MainActivity : AppCompatActivity() {

#     private val REQUEST_CALL_PERMISSIONS = 100
#     private lateinit var callReceiver: CallReceiver
#     private lateinit var socketManager: SocketManager
#     private var outgoingNumber: String? = null

#     override fun onCreate(savedInstanceState: Bundle?) {
#         super.onCreate(savedInstanceState)
#         setContentView(R.layout.activity_main)

#         // Verificamos y solicitamos permisos
#         checkAndRequestPermissions()

#         // Inicializar el receptor de llamadas
#         callReceiver = CallReceiver()
#         val intentFilter = IntentFilter().apply {
#             addAction(Intent.ACTION_NEW_OUTGOING_CALL) // Para llamadas salientes
#             addAction("android.intent.action.PHONE_STATE") // Para cambios en el estado del teléfono
#         }
#         registerReceiver(callReceiver, intentFilter)

#         // Iniciar el SocketManager y escuchar órdenes del backend
#         socketManager = SocketManager(this) { number ->
#             placeCall(number)
#         }
#         socketManager.connect()
#     }

#     // Verificar y solicitar permisos en tiempo de ejecución
#     private fun checkAndRequestPermissions() {
#         if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED ||
#             ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {

#             ActivityCompat.requestPermissions(this, arrayOf(
#                 Manifest.permission.READ_PHONE_STATE,
#                 Manifest.permission.CALL_PHONE
#             ), REQUEST_CALL_PERMISSIONS)
#         }
#     }

#     // Método para realizar una llamada PSTN
#     private fun placeCall(number: String) {
#         outgoingNumber = number // Guardamos el número de la llamada saliente
#         if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {
#             val callIntent = Intent(Intent.ACTION_CALL, Uri.parse("tel:$number"))
#             startActivity(callIntent)
#             Log.d("MainActivity", "Iniciando llamada a $number")
#         } else {
#             Log.e("MainActivity", "Permiso CALL_PHONE no concedido.")
#         }
#     }

#     // Limpiar los recursos al destruir la actividad
#     override fun onDestroy() {
#         super.onDestroy()
#         unregisterReceiver(callReceiver) // Desregistrar el BroadcastReceiver
#     }

#     // Manejar la respuesta de permisos
#     override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
#         super.onRequestPermissionsResult(requestCode, permissions, grantResults)
#         if (requestCode == REQUEST_CALL_PERMISSIONS) {
#             if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
#                 Log.d("MainActivity", "Permisos concedidos")
#             } else {
#                 Log.e("MainActivity", "Permisos de llamada denegados")
#             }
#         }
#     }
# }


# D/CallReceiver state: 2
# D/CallReceiver CALL_STATE_RINGING: 1
# D/CallReceiver CALL_STATE_OFFHOOK: 2
# D/CallReceiver CALL_STATE_IDLE: 0


# D/CallReceiver state: 0
# D/CallReceiver CALL_STATE_RINGING: 1
# D/CallReceiver CALL_STATE_OFFHOOK: 2
# D/CallReceiver CALL_STATE_IDLE: 0

# D/MainActivity: Iniciando llamada a 913473352
# D/SocketManager: Llamando al número: 913473352
# I/ViewRootImpl@32b7aaa[MainActivity]: handleWindowFocusChanged: 0 0 call from android.view.ViewRootImpl.-$$Nest$mhandleWindowFocusChanged:0
# I/ImeFocusController: onPreWindowFocus: skipped, hasWindowFocus=false mHasImeFocus=true
# I/ImeFocusController: onPostWindowFocus: skipped, hasWindowFocus=false mHasImeFocus=true
# I/BLASTBufferQueue_Java: update, w= 1080 h= 2400 mName = ViewRootImpl@32b7aaa[MainActivity] mNativeObject= 0xb4000076edae8100 sc.mNativeObject= 0xb4000076edaf2040 format= -1 caller= android.view.ViewRootImpl.updateBlastSurfaceIfNeeded:3017 android.view.ViewRootImpl.relayoutWindow:10131 android.view.ViewRootImpl.performTraversals:4110 android.view.ViewRootImpl.doTraversal:3288 android.view.ViewRootImpl$TraversalRunnable.run:11344 android.view.Choreographer$CallbackRecord.run:1689 
# I/ViewRootImpl@32b7aaa[MainActivity]: Relayout returned: old=(0,0,1080,2400) new=(0,0,1080,2400) relayoutAsync=true req=(1080,2400)0 dur=0 res=0x0 s={true 0xb4000076edade800} ch=false seqId=0
# I/ViewRootImpl@32b7aaa[MainActivity]: registerCallbackForPendingTransactions
# I/ViewRootImpl@32b7aaa[MainActivity]: mWNT: t=0xb4000077422c8a00 mBlastBufferQueue=0xb4000076edae8100 fn= 5 mRenderHdrSdrRatio=1.0 caller= android.view.ViewRootImpl$6.onFrameDraw:5635 android.view.ViewRootImpl$2.onFrameDraw:2146 android.view.ThreadedRenderer$1.onFrameDraw:792 
# I/ViewRootImpl@32b7aaa[MainActivity]: handleWindowFocusChanged: 1 0 call from android.view.ViewRootImpl.-$$Nest$mhandleWindowFocusChanged:0
# D/ViewRootImpl@32b7aaa[MainActivity]: mThreadedRenderer.initializeIfNeeded()#2 mSurface={isValid=true 0xb4000076edade800}
# D/InputMethodManagerUtils: startInputInner - Id : 0
# I/InputMethodManager: startInputInner - IInputMethodManagerGlobalInvoker.startInputOrWindowGainedFocus
# I/ViewRootImpl@32b7aaa[MainActivity]: handleWindowFocusChanged: 0 0 call from android.view.ViewRootImpl.-$$Nest$mhandleWindowFocusChanged:0
# I/ImeFocusController: onPreWindowFocus: skipped, hasWindowFocus=false mHasImeFocus=true
# I/ImeFocusController: onPostWindowFocus: skipped, hasWindowFocus=false mHasImeFocus=true
# I/ViewRootImpl@32b7aaa[MainActivity]: handleAppVisibility mAppVisible = true visible = false
# I/ViewRootImpl@32b7aaa[MainActivity]: destroyHardwareResources: Callers=android.view.ViewRootImpl.performTraversals:3932 android.view.ViewRootImpl.doTraversal:3288 android.view.ViewRootImpl$TraversalRunnable.run:11344 android.view.Choreographer$CallbackRecord.run:1689 android.view.Choreographer$CallbackRecord.run:1698 android.view.Choreographer.doCallbacks:1153 android.view.Choreographer.doFrame:1079 android.view.Choreographer$FrameDisplayEventReceiver.run:1646 android.os.Handler.handleCallback:958 android.os.Handler.dispatchMessage:99 
# D/OpenGLRenderer: CacheManager::trimMemory(20)
# I/ViewRootImpl@32b7aaa[MainActivity]: Relayout returned: old=(0,0,1080,2400) new=(0,0,1080,2400) relayoutAsync=false req=(1080,2400)8 dur=22 res=0x402 s={false 0x0} ch=true seqId=0
# I/ViewRootImpl@32b7aaa[MainActivity]: stopped(true) old = false
# D/ViewRootImpl@32b7aaa[MainActivity]: WindowStopped on com.example.phone/com.example.phone.MainActivity set to true
# D/OpenGLRenderer: CacheManager::trimMemory(20)
# D/InputTransport: Input channel destroyed: 'ClientS', fd=133
# D/OpenGLRenderer: CacheManager::trimMemory(20)
# D/PhoneStateListener: Estado de la llamada: 2
# D/PhoneStateListener: Llamada saliente establecida
# D/MainActivity: Notificando al backend que la llamada fue establecida